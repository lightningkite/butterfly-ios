// Generated by Khrysalis Swift converter - this file will be overwritten.
// File: views/FormField.kt
// Package: com.lightningkite.butterfly.views
import Foundation

public class FormValidationError {
    public var field: UntypedFormField
    public var string: ViewString
    public init(field: UntypedFormField, string: ViewString) {
        self.field = field
        self.string = string
        //Necessary properties should be initialized now
    }
}

public protocol UntypedFormField: AnyObject {
    
    var name: ViewString { get }
    
    var untypedObservable: Any { get }
    
    var validation: (UntypedFormField) -> ViewString? { get }
    
    var error: StandardObservableProperty<ViewString?> { get }
    
}


public class FormField<T> : UntypedFormField {
    public var name: ViewString
    public var observable: MutableObservableProperty<T>
    public var validation:  (UntypedFormField) -> ViewString?
    public init(name: ViewString, observable: MutableObservableProperty<T>, validation: @escaping  (UntypedFormField) -> ViewString?) {
        self.name = name
        self.observable = observable
        self.validation = validation
        self.error = StandardObservableProperty(underlyingValue: nil)
        //Necessary properties should be initialized now
    }
    
    public let error: StandardObservableProperty<ViewString?>
    public var value: T {
        get { return self.observable.value }
        set(value) {
            self.observable.value = value
        }
    }
    public var untypedObservable: Any {
        get { return self.observable }
    }
}

public extension FormField where T == String {
    func required() -> ViewString? {
        if self.observable.value.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty {
            return ViewStringTemplate(template: Form.Companion.INSTANCE.xIsRequired, arguments: [self.name])
        } else {
            return nil
        }
    }
}

public extension FormField {
    func notNull() -> ViewString? {
        if self.observable.value == nil {
            return ViewStringTemplate(template: Form.Companion.INSTANCE.xIsRequired, arguments: [self.name])
        } else {
            return nil
        }
    }
}

public extension FormField where T == Bool {
    func notFalse() -> ViewString? {
        if (!self.observable.value) {
            return ViewStringTemplate(template: Form.Companion.INSTANCE.xIsRequired, arguments: [self.name])
        } else {
            return nil
        }
    }
}

public extension ViewString {
    func unless(condition: Bool) -> ViewString? {
        if condition {
            return nil
        } else {
            return self
        }
    }
}


public extension FormField where T: Equatable {
    func matches(other: FormField<T>) -> ViewString? {
        if self.observable.value != other.observable.value {
            return ViewStringTemplate(template: Form.Companion.INSTANCE.xMustMatchY, arguments: [self.name, other.name])
        } else {
            return nil
        }
    }
}



