// Generated by Khrysalis Swift converter - this file will be overwritten.
// File: views/Form.kt
// Package: com.lightningkite.butterfly.views
import Foundation

public class Form {
    public init() {
        self.fields = []
        //Necessary properties should be initialized now
    }
    
    
    public class Companion {
        public init() {
            self.xIsRequired = ViewStringRaw(string: "%1$s is required.")
            self.xMustMatchY = ViewStringRaw(string: "%1$s must match %2$s.")
            //Necessary properties should be initialized now
        }
        public static let INSTANCE = Companion()
        
        public var xIsRequired: ViewString
        public var xMustMatchY: ViewString
    }
    
    public var fields: Array<UntypedFormField>
    
    public func field<T>(name: ViewString, defaultValue: T, validation: @escaping  (FormField<T>) -> ViewString?) -> FormField<T> {
        let obs = StandardObservableProperty(underlyingValue: defaultValue)
        let field = FormField(name: name, observable: obs, validation: { (untypedField) -> ViewString? in validation(untypedField as! FormField<T>) })
        self.fields.append(field)
        return field
    }
    
    public func field<T>(name: StringResource, defaultValue: T, validation: @escaping  (FormField<T>) -> ViewString?) -> FormField<T> { return self.field(name: ViewStringResource(resource: name), defaultValue: defaultValue, validation: validation) }
    
    public func fieldFromProperty<T>(name: ViewString, property: MutableObservableProperty<T>, validation: @escaping  (FormField<T>) -> ViewString?) -> FormField<T> {
        let field = FormField(name: name, observable: property, validation: { (untypedField) -> ViewString? in validation(untypedField as! FormField<T>) })
        self.fields.append(field)
        return field
    }
    
    public func fieldFromProperty<T>(name: StringResource, property: MutableObservableProperty<T>, validation: @escaping  (FormField<T>) -> ViewString?) -> FormField<T> { return self.fieldFromProperty(name: ViewStringResource(resource: name), property: property, validation: validation) }
    
    public func check() -> Array<FormValidationError> {
        return self.fields.compactMap({ (it) -> FormValidationError? in 
                let result = self.checkField(field: it)
                if let result = result {
                    return FormValidationError(field: it, string: result)
                } else {
                    return nil
                }
        })
    }
    
    public func runOrDialog(action: () -> Void) -> Void {
        let errors = self.check()
        if (!errors.isEmpty) {
            showDialog(message: errors.map({ (it) -> ViewString in it.string }).joinToViewString())
        } else {
            action()
        }
    }
    
    public func checkField(field: UntypedFormField) -> ViewString? {
        let result = field.validation(field)
        field.error.value = result
        return result
    }
}


